<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I'm Zimbean]]></title>
  <link href="http://zimbean.github.io/atom.xml" rel="self"/>
  <link href="http://zimbean.github.io/"/>
  <updated>2014-05-09T21:30:44+08:00</updated>
  <id>http://zimbean.github.io/</id>
  <author>
    <name><![CDATA[zimbean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二分查找(折半查找)算法]]></title>
    <link href="http://zimbean.github.io/blog/2014/05/09/er-fen-cha-zhao-zhe-ban-cha-zhao-suan-fa/"/>
    <updated>2014-05-09T12:58:00+08:00</updated>
    <id>http://zimbean.github.io/blog/2014/05/09/er-fen-cha-zhao-zhe-ban-cha-zhao-suan-fa</id>
    <content type="html"><![CDATA[<hr />

<p><strong>二分查找</strong>，也称<strong>折半查找</strong>算法，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。<!--more--></p>

<ul>
<li><p>复杂度分析 <br></p>

<ul>
<li><p>时间复杂度<br></p>

<p>折半搜索每次把搜索区域减少一半，时间复杂度为O\left( \log n  \right)。（n代表集合中元素的个数）</p></li>
<li><p>空间复杂度<br></p>

<p>O(1)。虽以递归形式定义，但是尾递归，可改写为循环。<br></p></li>
</ul>
</li>
<li><p>优点<br></p>

<p>比较次数少，查找速度快，平均性能好</p></li>
<li><p>缺点<br /></p>

<p>要求待查表为有序表，且插入删除困难</p>

<p>因此，折半查找方法适用于不经常变动而查找频繁的有序列表。<br ></p></li>
</ul>


<p>  <p style="color:blue">代码示例<p><b/></p>

<ul>
<li><p>C 源代码   <br></p></li>
<li><p>Objective-C 源代码<br ></p>

<p> <img src="../images/BinarySearch_oc.png" title="可选标题" alt="替代文本" /></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github+Octopress Blog]]></title>
    <link href="http://zimbean.github.io/blog/2014/02/18/hello/"/>
    <updated>2014-02-18T11:25:25+08:00</updated>
    <id>http://zimbean.github.io/blog/2014/02/18/hello</id>
    <content type="html"><![CDATA[<p>  之前看一些大牛的博客样式非常漂亮，所以花了将近2天时间，根据教程，终于把博客搭建好了。主要是运用Github+Octopress搭建博客。</p>
]]></content>
  </entry>
  
</feed>
